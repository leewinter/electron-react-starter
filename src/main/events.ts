import * as mssql from 'mssql';

import {
  DataChannel,
  EventRequest,
  EventResponse,
  SqlColumn,
  SqlExecutionRequestPayload,
  SqlExecutionResponsePayload,
  SqlLintPayload,
} from '../preload/index.d';
import { IpcMainEvent, ipcMain } from 'electron';

import { format } from 'sql-formatter';
import { parseSqlConnectionString } from './lib/sql';

interface EventRegistration {
  channel: DataChannel;
  evenRegister: () => void;
}

const eventsArray = [
  {
    channel: DataChannel.SQL_LINT,
    evenRegister: function (): void {
      ipcMain.on(
        `${this.channel}-request`,
        async (event: IpcMainEvent, args: EventRequest<SqlLintPayload>) => {
          console.log('Received from React:', args);

          const formattedCode = format(args.payload.sql, { language: 'tsql' });
          console.log('formattedCode', formattedCode);
          // Would be generated by some work
          const generatedResponsePayload = {
            channel: this.channel,
            payload: { sql: formattedCode },
          } as EventResponse<SqlLintPayload>;

          // Send a response back to the renderer process
          event.reply(`${this.channel}-response`, generatedResponsePayload);
        },
      );
    },
  },
  {
    channel: DataChannel.SQL_EXECUTE,
    evenRegister: function (): void {
      ipcMain.on(
        `${this.channel}-request`,
        async (event: IpcMainEvent, args: EventRequest<SqlExecutionRequestPayload>) => {
          console.log('Received from React:', args);
          try {
            const sqlConfig = parseSqlConnectionString(
              args.payload.selectedConnection.connectionString,
            );

            await mssql.connect(sqlConfig);
            const request = new mssql.Request();
            request.arrayRowMode = true;

            const result = await request.query(args.payload.sql);

            const sqlResult = result as unknown as SqlExecutionResponsePayload;

            const recordset = result.recordset ?? [];

            const columns =
              Array.isArray(sqlResult?.columns) && Array.isArray(sqlResult.columns[0])
                ? sqlResult.columns[0].map((col: SqlColumn) => {
                    return {
                      name: col.name,
                      type: col.type.name,
                      length: col.length,
                      nullable: col.nullable,
                      precision: col.precision,
                      scale: col.scale,
                    };
                  })
                : [];

            const generatedResponsePayload = {
              channel: this.channel,
              payload: { recordset, columns },
            } as EventResponse<SqlExecutionResponsePayload>;

            event.reply(`${this.channel}-response`, generatedResponsePayload);
          } catch (error) {
            console.error(error);
          }
        },
      );
    },
  },
] as EventRegistration[];

eventsArray.forEach((e: EventRegistration) => e.evenRegister());
